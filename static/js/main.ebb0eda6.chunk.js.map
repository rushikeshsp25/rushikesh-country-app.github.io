{"version":3,"sources":["images/logo-light.png","images/logo-dark.png","images/rotating-globe-light.gif","components/common/ThemeToggle.js","components/Navbar.js","config/index.js","components/common/Grid/Row.js","components/common/Grid/Col.js","components/filters/DropdownFilter.js","components/filters/SearchBox.js","components/filters/index.js","components/CountryCard.js","components/common/Loader.js","components/FilteredCountries.js","helper/coutryResultProcessing.js","services/api.js","components/common/Pagination.js","components/Home.js","components/CountryDetailCard.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ThemeToggle","props","theme","React","useContext","ThemeContext","className","style","marginRight","fontSize","icon","faMoon","type","checked","isChecked","onChange","onThemeToggle","Navbar","to","src","logoLight","logoDark","alt","defaultPageSize","defaultTotalRecords","apiDelay","Row","children","Col","span","DropdownFilter","value","initialRegion","event","persist","region","target","onRegionChange","regions","map","index","key","SearchBox","useState","initialCountry","searchValue","setSearchValue","searchSuggestions","setSearchSuggestions","handleValueChange","val","suggestions","searchArr","filter","country","match","RegExp","slice","getSearchMatchingSuggestions","countries","placeholder","onClick","preventDefault","onCountrySearch","suggestion","FilterMenu","CountryCard","alpha3Code","backgroundImage","flag","name","faCity","marginLeft","capital","faUsers","population","Loader","textAlign","marginTop","rotatingGlobe","color","message","FilteredCountries","margin","getAllRegionNames","allCountries","nameOfAllRegions","Set","forEach","add","getAllCountryNames","nameOfAllCountries","getPaginatedFilteredCountries","filteredCountries","pageNo","pageSize","getFilteredCountries","filters","result","length","getSingleCountryData","countryName","Promise","resolve","reject","setTimeout","axios","get","config","then","data","catch","error","Pagination","maxPageNo","Math","ceil","totalRecords","href","onPageChange","Array","el","e","page","getInitialState","oldFilters","JSON","parse","localStorage","getItem","oldPaginationOptions","pagination","Home","didMountRef","useRef","setAllCountries","setFilteredCountries","setFilters","setPageNo","useEffect","current","setItem","stringify","a","filterRes","console","log","regionName","CountryDetails","countryData","setCountryData","params","padding","marginBottom","borderBottom","width","nativeName","subregion","area","toLocaleString","timezones","join","languages","lang","currencies","currency","symbol","borders","Routes","exact","path","component","createContext","App","setTheme","Provider","updatedTheme","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebb0eda6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-light.1ebfb62e.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-dark.5648fe32.png\";","module.exports = __webpack_public_path__ + \"static/media/rotating-globe-light.499dd868.gif\";","import React from 'react';\nimport './ThemeToggle.css';\nimport { ThemeContext } from '../../App';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon } from '@fortawesome/free-solid-svg-icons';\n\nfunction ThemeToggle(props) {\n    const theme = React.useContext(ThemeContext);\n\n    let handleThemeToggle = () => {\n        if (typeof props.onThemeToggle === \"function\")\n            props.onThemeToggle()\n    }\n    return (\n        <span>\n            <span className={`sun-icon ${theme}`} style={{marginRight:\"5px\", fontSize:\"22px\"}}><FontAwesomeIcon icon={faMoon} /></span>\n            <label className={`switch ${theme}`}>\n                <input type=\"checkbox\" checked={props.isChecked} onChange={handleThemeToggle} />\n                <span className={`slider ${theme}`} />\n            </label>\n        </span>\n    )\n}\nexport default ThemeToggle;","import React from 'react';\nimport logoLight from '../images/logo-light.png';\nimport logoDark from '../images/logo-dark.png';\nimport ThemeToggle from './common/ThemeToggle';\nimport { ThemeContext } from '../App';\nimport './Navbar.css';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar(props) {\n    const theme = React.useContext(ThemeContext);\n    return (\n        <nav className={`topnav ${theme}`}>\n            <Link to=\"/\">\n                <img className={\"logo\"} src={theme === \"light\" ? logoLight : logoDark} alt={\"World\"}></img>\n            </Link>\n            <ThemeToggle isChecked={theme === \"light\" ? false : true} onThemeToggle={props.onThemeToggle}></ThemeToggle>\n        </nav>\n    );\n}\n\nexport default Navbar;","export default {\n    apiEndpoint: \"https://restcountries.eu/rest/v2\",\n    ui:{\n        defaultPageSize:18,\n        defaultTotalRecords:250,\n        apiDelay:1500\n    }\n}","import React from 'react';\nimport './Row.css';\nfunction Row(props) {\n    return (\n        <div className={\"row\"}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Row;","import React from 'react';\nimport './Col.css';\nfunction Col(props) {\n    return (\n        <div className={`col-${props.type?props.type+\"-\":\"\"}${props.span} ${props.className||\"\"}`}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Col;","import React from 'react';\n\nfunction DropdownFilter(props) {\n    let handleRegionChange = (event) => {\n        event.persist();\n        let region = event.target.value !== \"All Regions\" ? event.target.value : null\n        props.onRegionChange(region);\n    }\n    return (\n        <label className=\"region-select\">\n            <select value={props.initialRegion||\"\"} onChange={handleRegionChange}>\n                <option value={\"\"}>All Regions</option>\n                {\n                    props.regions && props.regions.map((region, index) => (\n                        <option key={`region-${index}`} value={region}>{region}</option>\n                    ))\n                }\n            </select>\n        </label>\n    );\n}\n\nexport default DropdownFilter;","import React from 'react';\nimport './Filters.css';\n\nfunction getSearchMatchingSuggestions(searchArr, searchValue) {\n    if (!searchValue || !searchArr)\n        return null;\n    let suggestions = searchArr.filter(country => {\n        return country.match(new RegExp(searchValue, 'i'));\n    })\n    return suggestions.slice(0, 5);\n}\n\nfunction SearchBox(props) {\n    const [searchValue, setSearchValue] = React.useState(props.initialCountry || \"\")\n    const [searchSuggestions, setSearchSuggestions] = React.useState(null);\n\n    function handelSearchClick(event) {\n        event.preventDefault();\n        if (typeof props.onCountrySearch === \"function\")\n            props.onCountrySearch(searchValue);\n    }\n\n    let handleValueChange = (val) => {\n        setSearchValue(val);\n        if (!val) {\n            setSearchSuggestions(null);\n        }\n        let suggestions = getSearchMatchingSuggestions(props.countries, val);\n        if (suggestions) {\n            setSearchSuggestions(suggestions);\n        }\n    };\n\n    let handleSuggestionClick = (value) => {\n        setSearchValue(value);\n        setSearchSuggestions(null);\n    }\n    // let handleOnBlur = () => {\n    //     // setSearchSuggestions(null);\n    // }\n\n    return (\n        <div className=\"search-container\">\n            <div className=\"search\">\n                <form className=\"search-form\">\n                    <input type=\"text\" placeholder=\"Search For Countries..\"\n                        value={searchValue}\n                        onChange={(event) => handleValueChange(event.target.value)}\n                    />\n                    <input type=\"submit\" value=\"Search\" onClick={handelSearchClick} />\n                </form>\n            </div>\n            <div className=\"search-suggestions\">\n                {\n                    searchSuggestions ?\n                        <ul>\n                            {\n                                searchSuggestions.map((suggestion, index) => (\n                                    <li key={`suggestion-${index}`}\n                                        onClick={() => handleSuggestionClick(suggestion)}\n                                    >{suggestion}</li>\n                                ))\n                            }\n                        </ul>\n                        : null\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport Row from '../common/Grid/Row';\nimport Col from '../common/Grid/Col';\nimport DropdownFilter from './DropdownFilter';\nimport SearchBox from './SearchBox';\nimport { ThemeContext } from '../../App';\nimport './Filters.css';\n\nfunction FilterMenu(props) {\n    const theme = React.useContext(ThemeContext);\n    return (\n        <div className={`filter-menu ${theme}`}>\n            <Row>\n                <Col span={6} type=\"lg\">\n                    <SearchBox\n                        onCountrySearch={props.onCountrySearch}\n                        countries={props.countries}\n                        initialCountry={props.initialCountry}\n                    >\n                    </SearchBox>\n                </Col>\n                <Col span={6} type=\"lg\">\n                    <DropdownFilter\n                        onRegionChange={props.onRegionChange}\n                        regions={props.regions}\n                        initialRegion={props.initialRegion}\n                    >\n                    </DropdownFilter>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default FilterMenu;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './CountryCard.css';\nimport { ThemeContext } from '../App';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers, faCity } from '@fortawesome/free-solid-svg-icons';\nfunction CountryCard(props) {\n    const theme = React.useContext(ThemeContext);\n    return (\n        <>\n            {\n                props.country ?\n                    <Link to={`/country/${props.country.alpha3Code}`}>\n                        <div className={`card ${theme}`}>\n                            <div className=\"card-image\" style={{ backgroundImage: `url(${props.country.flag})` }}>\n                            </div>\n                            <div className=\"card-description\">\n                                <p className=\"sub-heading no-text-overflow\">{props.country.name}</p>\n                                <div>\n                                    <span className=\"capital no-text-overflow\">\n                                        <FontAwesomeIcon className=\"info-text\" icon={faCity} />\n                                        <span className=\"info-text\" style={{ marginLeft: \"5px\" }}>{props.country.capital}</span>\n                                    </span>\n                                    <span className=\"population no-text-overflow\">\n                                        <FontAwesomeIcon className=\"info-text\" icon={faUsers} />\n                                        <span className=\"info-text\" style={{ marginLeft: \"5px\" }}>{props.country.population}</span>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </Link>\n                    :\n                    null\n            }\n        </>\n    );\n}\n\nexport default CountryCard;","import React from 'react';\nimport rotatingGlobe from '../../images/rotating-globe-light.gif';\n\nfunction Loader(props) {\n    return (\n        <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n            <img className=\"globe\" src={rotatingGlobe} alt=\"Loader...\"></img>\n            <p style={{ color: \"gray\" }}>{props.message}</p>\n        </div>\n    )\n}\n\nexport default Loader;","import React from 'react';\nimport Row from './common/Grid/Row';\nimport Col from './common/Grid/Col';\nimport CountryCard from './CountryCard';\nimport './FilteredCountries.css';\nimport Loader from './common/Loader';\n\nfunction FilteredCountries(props) {\n    return (\n        <div className=\"filtered-countries\">\n            {\n                props.countries ?\n                    <Row>\n                        {\n                            props.countries.map(country => (\n                                <Col key={`county-${country.name}`} span={2}>\n                                    <CountryCard country={country}></CountryCard>\n                                </Col>\n                            ))\n                        }\n                    </Row>\n                    : \n                    <>\n                    <Loader></Loader>\n                    <p style={{textAlign:\"center\", margin:\"50px\"}} className=\"info-text\">No Countries Are Found!</p>\n                    </>\n            }\n        </div>\n    );\n}\n\nexport default FilteredCountries;","export function getAllRegionNames(allCountries) {\n    if (!allCountries)\n        return null;\n    let nameOfAllRegions = new Set();\n    allCountries.forEach(country => {\n        if (country.region)\n            nameOfAllRegions.add(country.region);\n    });\n    return [...nameOfAllRegions];\n}\n\nexport function getAllCountryNames(allCountries) {\n    if (!allCountries)\n        return null;\n    let nameOfAllCountries = new Set();\n    allCountries.forEach(country => {\n        if (country.name)\n            nameOfAllCountries.add(country.name);\n    });\n    return [...nameOfAllCountries];\n}\n\nexport function getAlpha3ToCtrNameMapping(allCountries) {\n    if (!allCountries)\n        return null;\n    let mapping = {}\n    allCountries.forEach(country => {\n        mapping[country.alpha3Code] = country.name\n    });\n    return mapping;\n}\n\nexport function getPaginatedFilteredCountries(filteredCountries, pageNo, pageSize) {\n    if (!filteredCountries)\n        return null;\n    return filteredCountries.slice((pageNo - 1) * pageSize, pageNo * pageSize);\n}\n\nexport function getFilteredCountries(allCountries, filters) {\n    if (!allCountries)\n        return null;\n    let result = allCountries.filter(country => {\n        if (filters.country && country.name === filters.country) {\n            if (!filters.region || (filters.region && country.region === filters.region)) {\n                return true;\n            }\n        } else if (!filters.country\n            && (!filters.region || (filters.region && country.region === filters.region))) {\n            return true;\n        }\n        return false;\n    });\n    return result.length > 0 ? result : null;\n}","import axios from 'axios';\nimport config from '../config';\n\nexport function getAllCountriesData() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            axios.get(config.apiEndpoint + \"/all?fields=name;alpha3Code;capital;region;population;flag\")\n                .then(result => {\n                    resolve(result.data);\n                }).catch(error => {\n                    reject(error);\n                })\n        }, config.ui.apiDelay)\n    })\n}\n\nexport function getSingleCountryData(countryName) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            axios.get(config.apiEndpoint + `/alpha/${countryName}`)\n                .then(result => {\n                    resolve(result.data);\n                }).catch(error => {\n                    reject(error);\n                })\n        }, config.ui.apiDelay);\n    })\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Pagination.css';\nimport { ThemeContext } from '../../App';\n\nfunction Pagination(props) {\n    const theme = React.useContext(ThemeContext);\n    const maxPageNo = Math.ceil(props.totalRecords / props.pageSize);\n    const handlePageNoClick = (event, page) => {\n        event.preventDefault();\n        props.onPageChange(page);\n    }\n    const handlePrevClick = (event) => {\n        if (props.pageNo === 1)\n            return\n        event.preventDefault();\n        props.onPageChange(props.pageNo - 1);\n    }\n    const handleNextClick = (event) => {\n        if (props.pageNo === maxPageNo)\n            return\n        event.preventDefault();\n        props.onPageChange(props.pageNo + 1);\n    }\n    if (!props.totalRecords || !props.pageSize)\n        return null;\n    return (\n        <div className={`pagination-container ${theme}`}>\n            <span className=\"pagination\">\n                <a href=\"#\"\n                    onClick={handlePrevClick}\n                    className={props.pageNo === 1 ? \"disabled\" : \"\"}>&laquo;</a>\n                {\n                    [...Array(maxPageNo)].map((el, index) => (\n                        <a href=\"#\"\n                            key={index + 1}\n                            className={props.pageNo === index + 1 ? \"active\" : \"\"}\n                            onClick={(e) => handlePageNoClick(e, index + 1)}\n                        >{index + 1}</a>\n                    ))\n                }\n                <a href=\"#\"\n                    onClick={handleNextClick}\n                    className={props.pageNo === maxPageNo?\"disabled\":\"\"}>&raquo;</a>\n            </span>\n        </div>\n    )\n}\n\nPagination.propTypes = {\n    totalRecords: PropTypes.number.isRequired,\n    pageNo: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired\n};\n\nexport default Pagination;","import React from 'react';\nimport config from '../config';\nimport FilterMenu from './filters'\nimport FilteredCountries from './FilteredCountries';\nimport {\n    getAllRegionNames,\n    getAllCountryNames,\n    getPaginatedFilteredCountries,\n    getFilteredCountries\n} from '../helper/coutryResultProcessing';\nimport { getAllCountriesData } from '../services/api';\nimport Loader from './common/Loader';\nimport Pagination from './common/Pagination';\n\nlet getInitialState = () => {\n    const oldFilters = JSON.parse(localStorage.getItem(\"filters\"));\n    const oldPaginationOptions = JSON.parse(localStorage.getItem(\"paginationOptions\"));\n    return {\n        filters: {\n            country: oldFilters && \"country\" in oldFilters ? oldFilters.country : null,\n            region: oldFilters && \"region\" in oldFilters ? oldFilters.region : null\n        },\n        pagination: {\n            totalRecords: oldPaginationOptions && \"totalRecords\" in oldPaginationOptions ? oldPaginationOptions.totalRecords : config.ui.defaultTotalRecords,\n            pageNo: oldPaginationOptions && \"pageNo\" in oldPaginationOptions ? oldPaginationOptions.pageNo : 1,\n            pageSize: oldPaginationOptions && \"pageSize\" in oldPaginationOptions ? oldPaginationOptions.pageSize : config.ui.defaultPageSize\n        }\n    }\n}\n\nfunction Home() {\n    const didMountRef = React.useRef(false);\n    const [allCountries, setAllCountries] = React.useState(null);\n    const [filteredCountries, setFilteredCountries] = React.useState(null);\n    const [filters, setFilters] = React.useState(getInitialState().filters)\n    const [pagination, setPageNo] = React.useState(getInitialState().pagination);\n\n    React.useEffect(() => {\n        if (didMountRef.current) {\n            localStorage.setItem(\"filters\", JSON.stringify(filters));\n            localStorage.setItem(\"paginationOptions\", JSON.stringify(pagination));\n        } else didMountRef.current = true\n    }, [filters, pagination]);\n\n    React.useEffect(() => {\n        try {\n            (async () => {\n                let countries = await getAllCountriesData();\n                setAllCountries(countries);\n                if (filters && (filters.country || filters.region)) {\n                    let filterRes = getFilteredCountries(countries, filters)\n                    setFilteredCountries(filterRes);\n                    setPageNo(pagination => ({ ...pagination, totalRecords: filterRes ? filterRes.length : 0 }))\n                } else {\n                    setFilteredCountries(countries);\n                    setPageNo(pagination => ({ ...pagination, totalRecords: countries.length }))\n                }\n            })();\n        } catch (error) {\n            console.log(error);\n        }\n    }, []);\n\n    const handleCountrySearch = (countryName) => {\n        setFilters((filters) => ({ ...filters, country: countryName }));\n        let result = getFilteredCountries(allCountries, { ...filters, country: countryName });\n        setPageNo(pagination => ({ ...pagination, pageNo: 1, totalRecords: result ? result.length : 0 }))\n        setFilteredCountries(result);\n    }\n\n    const handleRegionChange = (regionName) => {\n        setFilters((filters) => ({ ...filters, region: regionName }));\n        let result = getFilteredCountries(allCountries, { ...filters, region: regionName });\n        setPageNo(pagination => ({ ...pagination, pageNo: 1, totalRecords: result ? result.length : 0 }))\n        setFilteredCountries(result);\n    }\n\n    const handlePageChange = (pageNo) => {\n        setPageNo(pagination => ({ ...pagination, pageNo: pageNo }))\n    }\n\n    return (\n        <>\n            {\n                allCountries ?\n                    <>\n                        <FilterMenu\n                            initialCountry={filters.country}\n                            initialRegion={filters.region}\n                            countries={getAllCountryNames(allCountries)}\n                            onCountrySearch={handleCountrySearch}\n                            regions={getAllRegionNames(allCountries)}\n                            onRegionChange={handleRegionChange}\n                        >\n                        </FilterMenu>\n                        <Pagination\n                            totalRecords={100}\n                            {...pagination}\n                            onPageChange={handlePageChange}\n                        >\n                        </Pagination>\n                        <FilteredCountries\n                            countries={getPaginatedFilteredCountries(filteredCountries, pagination.pageNo, pagination.pageSize)}\n                        >\n                        </FilteredCountries>\n                    </>\n                    : <Loader message={\"Fetching Countries\"} />\n            }\n        </>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport { getSingleCountryData } from '../services/api';\nimport Loader from './common/Loader';\nimport './CountryDetailCard.css';\nimport { ThemeContext } from '../App';\nimport Row from './common/Grid/Row';\nimport Col from './common/Grid/Col';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCity } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'react-router-dom';\n\nfunction CountryDetails(props) {\n    const theme = React.useContext(ThemeContext);\n    const [countryData, setCountryData] = React.useState();\n    React.useEffect(() => {\n        setCountryData(null);\n        try {\n            (async () => {\n                let country = await getSingleCountryData(props.match.params.name);\n                setCountryData(country);\n            })();\n        } catch (error) {\n            console.log(error);\n        }\n    }, [props.match.params.name])\n\n    return <div>\n        {\n            countryData ?\n                <div className={`country-detail-card ${theme}`}>\n                    <div className=\"heading\" style={{textAlign:\"center\",padding:\"20px\",marginBottom:\"20px\",borderBottom:\"1px solid #d5d5d5\"}}>COUNTRY DETAILS</div>\n                    <Row>\n                        <Col span={6} type={\"lg\"}>\n                            <img width=\"100%\" src={countryData.flag} alt={\"Country Flag\"}></img>\n                        </Col>\n                        <Col span={6} type={\"lg\"}>\n                            <p className=\"heading\">{countryData.name}{countryData.name !== countryData.nativeName ? \" | \" + countryData.nativeName : null}</p>\n                            <p className=\"sub-heading\">\n                                <FontAwesomeIcon icon={faCity} />\n                                <span style={{ marginLeft: \"10px\" }}>{countryData.capital}</span>\n                            </p>\n                            <div className=\"country-info-table-conatainer\">\n                                <table>\n                                    <tbody>\n                                        <tr>\n                                            <td><b>Region</b></td>\n                                            <td>{countryData.region} - {countryData.subregion}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><b>Area</b></td>\n                                            <td>{countryData.area} km²</td>\n                                        </tr>\n                                        <tr>\n                                            <td><b>Population</b></td>\n                                            <td>{countryData.population.toLocaleString()}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><b>Timezones</b></td>\n                                            <td>{countryData.timezones.join(', ')}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><b>Languages</b></td>\n                                            <td>{countryData.languages.map(lang => lang.name).join(', ')}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><b>Currencies</b></td>\n                                            <td>{countryData.currencies.map(currency => currency.symbol + \" - \" + currency.name).join(', ')}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><b>Baorder Shared With</b></td>\n                                            <td>\n                                                {\n                                                    countryData.borders.map((country, index) => (\n                                                        <span key={`outer-span-${index}`}>\n                                                            <Link key={`link-${index}`} to={`/country/${country}`}>{country}</Link>\n                                                            {\n                                                                index !== countryData.borders.length - 1 ?\n                                                                    <span key={`span-${index}`} style={{ marginRight: \"6px\" }}>,</span>\n                                                                    : null\n                                                            }\n                                                        </span>\n                                                    ))\n                                                }\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n                : <Loader message={\"Breathe In, Breathe Out :D\"} />\n        }\n    </div>\n}\nexport default CountryDetails;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from '../components/Home';\nimport CountryDetails from '../components/CountryDetailCard';\nfunction Routes(props) {\n    return (\n        <BrowserRouter>\n            {props.children}\n            <Switch>\n                <Route exact path=\"/\"\n                    component={Home}\n                />\n                <Route exact path=\"/country/:name\"\n                    component={CountryDetails}\n                />\n                <Route path='*' exact component={() => <h3 style={{textAlign:\"center\",marginTop:\"50px\"}}>404 Page Not Found</h3>} />\n            </Switch>\n        </BrowserRouter>\n    )\n}\nexport default Routes;","import React from 'react';\nimport Navbar from './components/Navbar';\nimport Routes from './routes'\nimport './App.css';\n\nlet getInitialState = () => {\n  const currentTheme = localStorage.getItem(\"currentTheme\");\n  return currentTheme || \"light\";\n}\nexport const ThemeContext = React.createContext();\nfunction App() {\n  const [theme, setTheme] = React.useState(getInitialState());\n  const handleThemeChange = () => {\n    let updatedTheme;\n    if (theme === 'light') {\n      updatedTheme = 'dark';\n    } else {\n      updatedTheme = 'light';\n    }\n    setTheme(updatedTheme);\n    localStorage.setItem(\"currentTheme\",updatedTheme);\n  }\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <div className={`body ${theme}`}>\n        <Routes>\n          <Navbar onThemeToggle={handleThemeChange}></Navbar>\n        </Routes>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}